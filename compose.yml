services:
  db_pg:
    build:
      context: ./db_pg
      dockerfile: Dockerfile
    healthcheck:
      test: pg_isready -U postgres
      interval: 1m30s
      timeout: 30s
      retries: 3
      start_period: 30s
    ports:
      - 5432:5432
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - backend

  db_mongo:
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: monitor_db
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017 --quiet
      interval: 1m30s
      timeout: 30s
      retries: 3
      start_period: 30s
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend

  elasticsearch:
    image: elasticsearch:8.12.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1024m -Xmx1024m
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1",
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always
    ports:
      - 9200:9200
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - backend
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 2048m

  kibana:
    image: kibana:8.12.2
    ports:
      - 5601:5601
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - kibana-data:/usr/share/kibana/data
    restart: always
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200

  rabbitmq:
    container_name: rabbitmq
    image: heidiks/rabbitmq-delayed-message-exchange:latest
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: user
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "node_health_check"]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - backend
    restart: unless-stopped

  web_ui:
    build:
      context: web_ui
    ports:
      - 3000:3000
    volumes:
      - web_ui_modules:/web_ui/node_modules
      - ./web_ui:/web_ui
    networks:
      - frontend
    restart: unless-stopped

  usr_microservice:
    build:
      context: user_microservice
    ports:
      - 8000:8000
    environment:
      POSTGRES_USER: user_db_user
      POSTGRES_PASSWORD: user_db_password
      POSTGRES_DB: user_db
      POSTGRES_SERVER: db_pg
    volumes:
      - ./user_microservice:/user_microservice
    depends_on:
      db_pg:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  recommender_microservice:
    build:
      context: recommender_microservice
    ports:
      - 8001:8001
    volumes:
      - ./recommender_microservice:/recommender_microservice
    depends_on:
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  offer_microservice:
    build:
      context: offer_microservice
    ports:
      - 8002:8002
    environment:
      POSTGRES_USER: offer_db_user
      POSTGRES_PASSWORD: offer_db_password
      POSTGRES_DB: offer_db
      POSTGRES_SERVER: db_pg
    volumes:
      - ./offer_microservice:/offer_microservice
    depends_on:
      db_pg:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  payment_microservice:
    build:
      context: payment_microservice
    ports:
      - 8004:8004
    environment:
      POSTGRES_USER: payment_db_user
      POSTGRES_PASSWORD: payment_db_password
      POSTGRES_DB: payment_db
      POSTGRES_SERVER: db_pg
    volumes:
      - ./payment_microservice:/payment_microservice
    depends_on:
      db_pg:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  monitor_microservice:
    build:
      context: monitor_microservice
    ports:
      - 8003:8003
    environment:
      MONGO_SERVER: db_mongo
      MONGO_PASSWORD: mongo
    volumes:
      - ./monitor_microservice:/monitor_microservice
    depends_on:
      db_mongo:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  proxy:
    image: nginx:stable
    ports:
      - 80:80
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./proxy/locations.conf:/etc/nginx/conf.d/locations.conf:ro
      - ./proxy/conf.d/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web_ui
      - usr_microservice
      - offer_microservice
      - recommender_microservice
    networks:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  pg_data:
    driver: local
  mongo_data:
    driver: local
  es_data:
    driver: local
  kibana-data:
    driver: local
  web_ui_modules:
    driver: local
  rabbitmq-data:
    driver: local

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
